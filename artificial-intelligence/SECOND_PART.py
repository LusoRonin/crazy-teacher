from MODULES.AC3_ALGORITHM import AC3
from MODULES.CSP_PROBLEM import CSP

# IT IS INTENDED TO SOLVE THE SUDOKU PROBLEM BELOW. THIS CONCRETE PROBLEM CAN BE SOLVED BY IMPLEMENTING ONLY THE ARC CONSISTENCY AND THE SOLUTION (WHICH IS UNIQUE). YOU SHOULD SOLVE THIS PROBLEM BY IMPLEMENTING THE AC-3 INFERENCE ALGORITHM OF ARC CONSISTENCY CONSISTENCES. IN THIS EXERCISE, IT IS NOT INTENDED TO IMPLEMENT THE BACKTRACKING ALGORITHM BUT ONLY THE AC-3.
# INPUT: THE SUDOKU PROBLEM = [[ 0, 0, 3, 0, 2, 0, 6, 0, 0 ], 
#                              [ 9, 0, 0, 3, 0, 5, 0, 0, 1 ],
#                              [ 0, 0, 1, 8, 0, 6, 4, 0, 0 ],
#                              [ 0, 0, 8, 1, 0, 2, 9, 0, 0 ], 
#                              [ 7, 0, 0, 0, 0, 0, 0, 0, 8 ], 
#                              [ 0, 0, 6, 7, 0, 8, 2, 0, 0 ], 
#                              [ 0, 0, 2, 6, 0, 9, 5, 0, 0 ], 
#                              [ 8, 0, 0, 2, 0, 3, 0, 0, 9 ], 
#                              [ 0, 0, 5, 0, 1, 0, 3, 0, 0 ]].
# OUTPUT: THE SOLUTION OF THE SUDOKU PROBLEM = [[ 4, 8, 3, 9, 2, 1, 6, 5, 7 ],
#                                               [ 9, 6, 7, 3, 4, 5, 8, 2, 1 ],
#                                               [ 2, 5, 1, 8, 7, 6, 4, 9, 3 ],
#                                               [ 5, 4, 8, 1, 3, 2, 9, 7, 6 ],
#                                               [ 7, 2, 9, 5, 6, 4, 1, 3, 8 ],
#                                               [ 1, 3, 6, 7, 9, 8, 2, 4, 5 ],
#                                               [ 3, 7, 2, 6, 8, 9, 5, 1, 4 ],
#                                               [ 8, 1, 4, 2, 5, 3, 7, 6, 9 ],
#                                               [ 6, 9, 5, 4, 1, 7, 3, 8, 2 ]].
# THE SUDOKU PROBLEM IS DEFINED BY A LIST OF LISTS. EACH LIST REPRESENTS A ROW OF THE SUDOKU PROBLEM. EACH CELL OF THE SUDOKU PROBLEM IS REPRESENTED BY A NUMBER. IF THE CELL IS EMPTY, THE NUMBER IS 0. IF THE CELL IS FILLED, THE NUMBER IS THE NUMBER FILLED IN THE CELL.
# [RULES OF SUDOKU] THE OBJECTIVE IS TO FILL A 9×9 GRID WITH DIGITS, SO THAT EACH COLUMN, EACH ROW, AND EACH OF THE NINE 3×3 SUBGRIDS THAT COMPOSE THE GRID (ALSO CALLED “BOXES”, “BLOCKS”, OR “REGIONS”) CONTAIN ALL OF THE DIGITS FROM 1 TO 9. THE PUZZLE SETTER PROVIDES A PARTIALLY COMPLETED GRID, WHICH FOR A WELL-POSED PUZZLE HAS A SINGLE SOLUTION.
if __name__ == '__main__':
    # SUDOKU DEFINITION:
    SUDOKU = [[ 0, 0, 3, 0, 2, 0, 6, 0, 0 ], 
               [ 9, 0, 0, 3, 0, 5, 0, 0, 1 ],
               [ 0, 0, 1, 8, 0, 6, 4, 0, 0 ],
               [ 0, 0, 8, 1, 0, 2, 9, 0, 0 ], 
               [ 7, 0, 0, 0, 0, 0, 0, 0, 8 ], 
               [ 0, 0, 6, 7, 0, 8, 2, 0, 0 ], 
               [ 0, 0, 2, 6, 0, 9, 5, 0, 0 ], 
               [ 8, 0, 0, 2, 0, 3, 0, 0, 9 ], 
               [ 0, 0, 5, 0, 1, 0, 3, 0, 0 ]]
    # DEFINE THE VARIABLES OF THE PROBLEM. VARIABLES ARE THE CELLS OF THE SUDOKU PROBLEM. EACH CELL IS REPRESENTED BY A TUPLE (ROW, COLUMN). THE ROW AND THE COLUMN ARE NUMBERS BETWEEN 1 AND 9, INCLUSIVE.
    VARIABLES = [(ROW, COLUMN) for ROW in range(1, 10) for COLUMN in range(1, 10)]
    # DEFINE THE DOMAINS OF THE PROBLEM. DOMAINS ARE THE POSSIBLE VALUES OF EACH CELL. EMPTY CELLS CAN HAVE A VALUE BETWEEN 1 AND 9, INCLUSIVE. FILLED CELLS CAN ONLY HAVE THE VALUE FILLED IN THE CELL.
    DOMAINS = {} # DOMAINS IS A DICTIONARY. THE KEY OF THE DICTIONARY IS THE VARIABLE. THE VALUE OF THE DICTIONARY IS THE LIST OF POSSIBLE VALUES OF THE VARIABLE.
    for ROW in range(1, 10): # FOR EACH ROW:
        for COLUMN in range(1, 10): # FOR EACH COLUMN:
            if SUDOKU[ROW - 1][COLUMN - 1] == 0: # IF THE CELL IS EMPTY.
                DOMAINS[(ROW, COLUMN)] = [VALUE for VALUE in range(1, 10)] # THE CELL CAN HAVE A VALUE BETWEEN 1 AND 9, INCLUSIVE.
            else: # IF THE CELL IS FILLED.
                DOMAINS[(ROW, COLUMN)] = [SUDOKU[ROW - 1][COLUMN - 1]] # THE CELL CAN ONLY HAVE THE VALUE FILLED IN THE CELL.
    # DEFINE THE CONSTRAINTS OF THE PROBLEM. THE CONSTRAINT VARIABLE IS DEFINED BY A LISTS OF TWO TUPLES (PAIRS). EACH TUPLE REPRESENTS A PAIR OF CELLS THAT MUST SATISFY THE CONSTRAINT. THE CONSTRAINT IS SATISFIED IF THE PAIR OF CELLS DOES NOT HAVE THE SAME VALUE. THE CONSTRAINTS ARE: 1. EACH ROW OF THE SUDOKU PROBLEM MUST CONTAIN ALL THE NUMBERS BETWEEN 1 AND 9, INCLUSIVE, WITHOUT REPETITIONS. 2. EACH COLUMN OF THE SUDOKU PROBLEM MUST CONTAIN ALL THE NUMBERS BETWEEN 1 AND 9, INCLUSIVE, WITHOUT REPETITIONS. 3. EACH 3x3 SUB-GRID OF THE SUDOKU PROBLEM MUST CONTAIN ALL THE NUMBERS BETWEEN 1 AND 9, INCLUSIVE, WITHOUT REPETITIONS.
    CONSTRAINTS = []
    # CONSTRAINT 1: EACH ROW OF THE SUDOKU PROBLEM MUST CONTAIN ALL THE NUMBERS BETWEEN 1 AND 9, INCLUSIVE, WITHOUT REPETITIONS. INCLUDE ALL PERMUATIONS OF EACH PAIR OF CELLS OF THE ROW THAT MUST SATISFY THE CONSTRAINT, WITH REPETITIONS.
    for ROW in range(1, 10): # FOR EACH ROW OF THE SUDOKU PROBLEM:
        for COLUMN_1 in range(1, 10): # FOR EACH COLUMN OF THE SUDOKU PROBLEM:
            for COLUMN_2 in range(COLUMN_1 + 1, 10): # FOR EACH COLUMN + 1 OF THE SUDOKU PROBLEM:
                CONSTRAINTS.append([(ROW, COLUMN_1), (ROW, COLUMN_2)]) # INCLUDE THE PAIR OF CELLS THAT MUST SATISFY THE CONSTRAINT.
    # CONSTRAINT 2: EACH COLUMN OF THE SUDOKU PROBLEM MUST CONTAIN ALL THE NUMBERS BETWEEN 1 AND 9, INCLUSIVE. INCLUDE ALL PERMUATIONS OF EACH PAIR OF CELLS OF THE COLUMN THAT MUST SATISFY THE CONSTRAINT, WITH REPETITIONS.
    for COLUMN in range(1, 10): # FOR EACH COLUMN OF THE SUDOKU PROBLEM:
        for ROW_1 in range(1, 10): # FOR EACH ROW OF THE SUDOKU PROBLEM:
            for ROW_2 in range(ROW_1 + 1, 10): # FOR EACH ROW + 1 OF THE SUDOKU PROBLEM:
                CONSTRAINTS.append([(ROW_1, COLUMN), (ROW_2, COLUMN)]) # INCLUDE THE PAIR OF CELLS THAT MUST SATISFY THE CONSTRAINT.
    # CONSTRAINT 3: EACH 3x3 SUB-GRID OF THE SUDOKU PROBLEM MUST CONTAIN ALL THE NUMBERS BETWEEN 1 AND 9, INCLUSIVE. INCLUDE ALL PERMUATIONS OF EACH PAIR OF CELLS OF THE SUB-GRID THAT MUST SATISFY THE CONSTRAINT, WITH REPETITIONS.
    for ROW in range(1, 10, 3): # FOR EACH ROW OF THE SUDOKU PROBLEM:
        for COLUMN in range(1, 10, 3): # FOR EACH COLUMN OF THE SUDOKU PROBLEM:
            for ROW_1 in range(ROW, ROW + 3): # FOR EACH ROW OF THE SUB-GRID:
                for COLUMN_1 in range(COLUMN, COLUMN + 3): # FOR EACH COLUMN OF THE SUB-GRID:
                    for ROW_2 in range(ROW_1, ROW + 3): # FOR EACH ROW + 1 OF THE SUB-GRID:
                        for COLUMN_2 in range(COLUMN_1 + 1, COLUMN + 3): # FOR EACH COLUMN + 1 OF THE SUB-GRID:
                            CONSTRAINTS.append([(ROW_1, COLUMN_1), (ROW_2, COLUMN_2)]) # INCLUDE THE PAIR OF CELLS THAT MUST SATISFY THE CONSTRAINT.
    PROBLEM = CSP(VARIABLES, DOMAINS, CONSTRAINTS) # DEFINE THE PROBLEM.
    SOLUTION = AC3(PROBLEM) # SOLVE THE PROBLEM.
    if SOLUTION: # IF THE PROBLEM HAS A SOLUTION; PRINT THE SOLUTION.
        # DRAW A SUDOKU BOARD IN A CONSOLE. FILLS THE CELLS WITH THE VALUES OF THE SOLUTION. IF THE CELL ALREADY HAD A VALUE IN THE SUDOKU VARIABLE, THE VALUE IS PRINTED IN THE CELL; OTHERWISE, THE VALUE IS PRINTED IN THE CELL IN GREEN.
        for ROW in range(1, 10): # FOR EACH ROW OF THE SUDOKU PROBLEM:
            for COLUMN in range(1, 10): # FOR EACH COLUMN OF THE SUDOKU PROBLEM:
                if SUDOKU[ROW - 1][COLUMN - 1] == 0: # IF THE CELL IS EMPTY.
                    print('\x1b[38;5;39m' + str(PROBLEM.DOMAINS[(ROW, COLUMN)][0]) + '\033[0m', end=' ') # PRINT THE VALUE OF THE CELL IN GREEN.
                else: # IF THE CELL IS NOT EMPTY.
                    print(str(SUDOKU[ROW - 1][COLUMN - 1]), end=' ') # PRINT THE VALUE OF THE CELL.
            print() # PRINT A NEW LINE.
    else: # IF THE PROBLEM DOES NOT HAVE A SOLUTION; PRINT THE ERROR MESSAGE.
        print('NO SOLUTION WITH THIS ALGORITHM') # PRINT THE ERROR MESSAGE.